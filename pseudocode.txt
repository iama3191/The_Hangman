Before coding:
(X) Choose theme for the hangman (country names) 
(X) Create list in the words.py file 
(X) Create stages of the hangman (Decide how many stages. The # of stages == # of tries) 

Game:
(X) Import, words, random library, and stages
(X) Generate a random word
(X) Ask to the user for an input (all inputs where be transformed into uppercase)
(X) Check if it is an alphabetic character, a number, or if it's a single character.
    a. If it is a number, display a message of invalid input and ask for a new one. (X)
    b. If the input is greater than 1 character, check if it is the secret word. (X)
    c. If it is an alphabetic character, continue to the next comparison. (X)
(X) Check if the letter was already used, what will happen?
    a. Ask for a new input
( ) Is the letter in the word to guess?
    a. 'y' --> show the place in the word, and if it is in one or more places, show them
    b. 'n' --> add the letter to a list of invalid letters and update the hangmans's stages (X)
(X) Count the # of tries and repeat. 
(X) if # of tries is 0 and the user hasn't guessed. Display message of good luck for the next time (X)
( ) Ask to the user if he wants to play a new game

#Features to implement
( ) Show colors, simple color scheme (green for winning, red for losing and yellow as a warning)
( ) Add more ASCII art for the game (Title: Hangman, welcome, final message )
(N) No matter if the user gets the word, at the end, a message will be displayed with some info of the country
(Y) A personal approach to the user: Ask for his name, and every message must be personal to him

#Pages to Check
Color to the terminal: https://stackabuse.com/how-to-print-colored-text-in-python/

#W3schools

https://www.w3schools.com/python/ref_string_isalpha.asp

https://www.educative.io/edpresso/how-to-compare-two-strings-in-python


https://stackoverflow.com/questions/49463141/how-to-print-a-list-like-a-string

https://www.delftstack.com/howto/python/python-find-all-indexes-of-a-character-in-string/#:~:text=We%20can%20use%20the%20finditer,indexes%20where%20the%20pattern%20occurs.

#fix
+ If the word has a letter in more than one place, it need to show in the terminal. 
    Right now, it only shows once
+ The user experience needs to be improve, work with whitespaces and add colors if it is possible
+ refactorize the code, it is already hard for me to read and understand.
+ If the user enters a correct letter, it shows hangman[0] like if the user is wrong
+ add:
try: 
valid_input = player_guess.isalpha()
except:
    print('invalid input')


#Ideas

+ Create a function to change the display of the incorrect_letters, correct_letters, word_length and used_letters.
Instead of printing a list, print a string


if status is True:
                    is_correct = True
                    print('You have done it')